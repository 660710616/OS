import java.io.*;
import java.net.*;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.concurrent.*;

public class ProcessNode { 
    private int pid; // ‡πÄ‡∏•‡∏Ç Process ID
    private int myPort; // Port ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
    private ServerSocket serverSocket; // ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏à‡∏≤‡∏Å Process ‡∏≠‡∏∑‡πà‡∏ô
    private ExecutorService threadPool = Executors.newCachedThreadPool(); //‡πÉ‡∏ä‡πâ‡∏£‡∏±‡∏ô‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≤‡∏á‡πÜ‡πÄ‡∏õ‡πá‡∏ô threads
    private volatile boolean alive = true; //‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á Process ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô / ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    private static final SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss"); //format ‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô log
    private Map<Integer, Long> heartbeatTable = new ConcurrentHashMap<>(); // ‡πÄ‡∏Å‡πá‡∏ö timestamp heartbeat ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞ PID 

    // election variables
    private volatile int bossId = -1;
    private static final int totalProcesses = 3; // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô process ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    private volatile int currentBoss = -1; // boss ‡∏ó‡∏µ‡πà process ‡∏à‡∏≥‡πÑ‡∏î‡πâ
    private volatile boolean inElection = false; // flag ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏°‡∏µ election ‡∏≠‡∏¢‡∏π‡πã‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    // volatile ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ ‡∏≠‡πà‡∏≤‡∏ô/‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ï‡∏£‡∏á‡∏à‡∏≤‡∏Å main memory ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏´‡∏•‡∏≤‡∏¢ thread ‡∏°‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà update ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÄ‡∏™‡∏°‡∏≠

    private Map<Integer, Socket> connections = new ConcurrentHashMap<>();
    private Map<Integer, PrintWriter> writers = new ConcurrentHashMap<>();

    // ‡πÅ‡∏°‡∏õ PID ‡∏à‡∏≤‡∏Å IP address ‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏£‡∏¥‡∏á ( ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á Socket(host, port) )
    private static final Map<Integer, String> processIPs = Map.of(
        1, "172.28.37.41",  // ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á 1
        2, "172.28.37.41",  // ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á 2
        3, "172.28.37.41"   // ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á 3
    );

    public ProcessNode(int pid, int myPort) throws IOException {
        this.pid = pid;
        this.myPort = myPort;
        //this.serverSocket = new ServerSocket(myPort);  //‡∏™‡∏£‡πâ‡∏≤‡∏á server socket ‡∏à‡∏≤‡∏Å myport
        this.serverSocket = new ServerSocket(myPort, 50, InetAddress.getByName("0.0.0.0"));
    }

    private String ts() {
        return "[" + sdf.format(new java.util.Date()) + "] ";  // timestamp ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö log
    }

    // ---------------- START ----------------
    // ‡πÄ‡∏Å‡∏¥‡∏î‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö
    public void start() {
        threadPool.execute(this::listen); // ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤
        threadPool.execute(this::sendHeartbeat); // ‡∏™‡πà‡∏á heartbeat ‡πÑ‡∏õ‡∏´‡∏≤ process ‡∏≠‡∏∑‡πà‡∏ô (‡∏ó‡∏∏‡∏Å‡πÜ 1 ‡∏ß‡∏¥)
        threadPool.execute(this::randomCrash); // ‡∏™‡∏∏‡πà‡∏°‡∏Å‡∏≤‡∏£ crash (Process ‡∏ï‡∏≤‡∏¢) / revive (Process ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà)
        threadPool.execute(this::monitorBoss); // ‡πÉ‡∏ä‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ö‡∏≠‡∏™‡∏¢‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∂‡πÄ‡∏õ‡∏•‡πà‡∏≤ ‡∏ñ‡πâ‡∏≤‡∏ö‡∏≠‡∏™‡∏ï‡∏≤‡∏¢/‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô -> startElection
        System.out.println(ts() + "Process " + pid + " started on port " + myPort);

        /*
           ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏≠‡∏™‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÉ‡∏´‡πâ P1 (‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å) ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
         */
        if (pid == 1) {
            threadPool.execute(() -> {
                try {
                    Thread.sleep(3000);
                    System.out.println(ts() + "üöÄ Initial election triggered by P" + pid);
                    startElection();
                } catch (InterruptedException e) {}
            });
        }
    }

    // ---------------- LISTEN ----------------
    // ‡πÉ‡∏ä‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å Process ‡∏ï‡∏±‡∏ß‡∏≠‡∏∑‡πà‡∏ô‡πÜ
    private void listen() {
        while (true) {
            try {
                Socket socket = serverSocket.accept();
                threadPool.execute(() -> handleSocket(socket));
            } catch (IOException e) {
                if (alive) e.printStackTrace();
            }
        }
    }

    /*
    handleMessage ‡∏ó‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
    */
    private void handleMessage(String msg) {
        if (!alive) return;

        /*
        ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏≠‡∏™‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
        1.set ‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á inElection ‡πÄ‡∏õ‡πá‡∏ô true
        2.‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ initiator ‡πÅ‡∏•‡∏∞ candidates ‡∏ó‡∏µ‡πà‡∏™‡∏∞‡∏™‡∏°‡∏°‡∏≤
        3.‡πÄ‡∏û‡∏¥‡πà‡∏° pid ‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤ candidates 
        */
        if (msg.startsWith("ELECTION")) {
            inElection = true;

            String[] parts = msg.split(" ");
            int initiator = Integer.parseInt(parts[1]);
            Set<Integer> candidates = new HashSet<>();
            for (int i = 2; i < parts.length; i++) {
                candidates.add(Integer.parseInt(parts[i]));
            }
            candidates.add(pid);

            // initiator = pid ; ‡∏ß‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏≠‡∏™‡πÅ‡∏•‡πâ‡∏ß -> ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏≠‡∏™
            if (initiator == pid) {
                int newBoss = Collections.max(candidates);
                bossId = newBoss;
                currentBoss = newBoss;
                inElection = false;
                System.out.println(ts() + "üëë New boss elected: P" + newBoss);
                sendCoordinator(newBoss);
            } else {
                forwardElection(candidates, initiator); // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏° (initiator) -> ‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
            }
        } 
        
        //‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ß‡πà‡∏≤‡πÉ‡∏Ñ‡∏£‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏≠‡∏™
        else if (msg.startsWith("COORDINATOR")) {
            int newBoss = Integer.parseInt(msg.split(" ")[1]);

            //‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ö‡∏≠‡∏™‡∏Ñ‡∏ô‡πÉ‡∏´‡∏°‡πà
            if (newBoss != currentBoss) {
                bossId = newBoss;
                currentBoss = newBoss;
                inElection = false;

                if (newBoss == pid) { // ‡∏ñ‡πâ‡∏≤ pid ‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏™‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö PID ‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á -> ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏≤‡πÄ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏≠‡∏™
                    System.out.println(ts() + "üéâ P" + pid + " declares: I am the new BOSS!");
                } else { // ‡∏ñ‡πâ‡∏≤ pid ‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏™‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö PID ‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á -> ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏≤‡∏£‡∏±‡∏ö‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡πÉ‡∏Ñ‡∏£‡∏Ñ‡∏∑‡∏≠‡∏ö‡∏≠‡∏™‡∏Ñ‡∏ô‡πÉ‡∏´‡∏°‡πà
                    System.out.println(ts() + "üì¢ P" + pid + " acknowledges new boss: P" + newBoss);
                }
                forwardCoordinator(newBoss); // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡∏≠‡∏∑‡πà‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ß‡πà‡∏≤‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏Ñ‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏≠‡∏™
            }
        } 
        
        //‡πÉ‡∏ä‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á heartbeat ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß Process ‡∏≠‡∏∑‡πà‡∏ô
        else if (msg.startsWith("HEARTBEAT")) {                  
            int senderPid = Integer.parseInt(msg.split(" ")[1]);
            heartbeatTable.put(senderPid, System.currentTimeMillis());
            System.out.println(ts() + "P" + pid + " üíì got heartbeat from P" + senderPid);

        } 
        
        //‡πÉ‡∏ä‡πâ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö Process ‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏ñ‡∏≤‡∏°‡πÄ‡∏£‡∏≤‡∏ß‡πà‡∏≤‡πÉ‡∏Ñ‡∏£‡∏Ñ‡∏∑‡∏≠‡∏ö‡∏≠‡∏™
        else if (msg.startsWith("WHO_IS_BOSS")) {
            int asker = Integer.parseInt(msg.split(" ")[1]);
            if (currentBoss != -1) {
                int targetPort = 5000 + asker;
                String host = processIPs.get(asker); // ‚úÖ ‡πÉ‡∏ä‡πâ IP mapping
                try (Socket socket = new Socket(host, targetPort)) {
                    PrintWriter out = new PrintWriter(socket.getOutputStream(), true);
                    out.println("COORDINATOR " + currentBoss);
                } catch (IOException e) {}
            }
        }
    }

    // ---------------- HEARTBEAT ----------------
    /*
    ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á heartbeat ‡πÉ‡∏´‡πâ Process ‡∏ï‡∏±‡∏ß‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏∏‡∏Å‡πÜ 1 ‡∏ß‡∏¥
    (‡∏ñ‡πâ‡∏≤ Process ‡∏ï‡∏≤‡∏¢/‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡πà‡∏á heartbeat ‡πÑ‡∏õ‡πÉ‡∏´‡πâ Process ‡∏≠‡∏∑‡πà‡∏ô)
     */
     private void sendHeartbeat() {
        while (true) {
            try {
                Thread.sleep(1000);
                if (!alive) continue;

                // ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏ó‡∏∏‡∏Å process ‡∏ó‡∏µ‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å ‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢ heartbeat
                for (int targetPid = 1; targetPid <= totalProcesses; targetPid++) {
                    if (targetPid == pid) continue;
                    try {
                        getConnection(targetPid);
                        PrintWriter out = writers.get(targetPid);
                        if (out != null) {
                            out.println("HEARTBEAT " + pid);
                            System.out.println(ts() + "P" + pid + " üíå sending heartbeat to P" + targetPid);
                        }
                    } catch (IOException e) {
                        connections.remove(targetPid);
                        writers.remove(targetPid);
                        System.out.println(ts() + "‚ö†Ô∏è P" + pid + " cannot reach P" + targetPid);
                    }
                }
            } catch (Exception e) {
                if (alive) e.printStackTrace();
            }
        }
    }

    // ---------------- GET ALIVE ----------------
    /*
    ‡πÉ‡∏ä‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Process ‡πÑ‡∏´‡∏ô‡∏¢‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà
    (‡∏ñ‡πâ‡∏≤ Process ‡∏ï‡∏±‡∏ß‡πÑ‡∏´‡∏ô heartbeat ‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡πÄ‡∏Å‡∏¥‡∏ô 20 = Process ‡∏ô‡∏±‡πâ‡∏ô‡∏ï‡∏≤‡∏¢/‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô)
     */
    private List<Integer> getAlivePids() {
        List<Integer> alivePids = new ArrayList<>();
        long now = System.currentTimeMillis();
        for (int i = 1; i <= totalProcesses; i++) {
            if (i == pid && alive) {
                alivePids.add(i);
            } else {
                Long lastBeat = heartbeatTable.get(i);
                if (lastBeat != null && now - lastBeat < 20000) {
                    alivePids.add(i);
                }
            }
        }
        Collections.sort(alivePids);
        return alivePids;
    }

    // ---------------- MONITOR BOSS ----------------
    /*
    ‡∏ó‡∏∏‡∏Å‡πÜ 2 ‡∏ß‡∏¥‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ö‡∏≠‡∏™‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏¢‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏°‡∏±‡πâ‡∏¢ (‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏≠‡∏¢‡∏π‡πà) ‡∏ñ‡πâ‡∏≤‡∏ö‡∏≠‡∏™‡∏ï‡∏≤‡∏¢‡∏à‡∏∞ trigger election ‡πÉ‡∏´‡∏°‡πà
     */
    private void monitorBoss() {
        threadPool.execute(() -> {
            while (alive) {
                try {
                    Thread.sleep(2000); // üîÑ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å 2 ‡∏ß‡∏¥ ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°

                    if (!inElection && (currentBoss == -1 || !!getAlivePids().contains(currentBoss))) {
                        // ‡∏ó‡∏≥ delay ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô false positive
                        threadPool.execute(() -> {
                            try {
                                Thread.sleep(2000); // ‡∏£‡∏≠‡πÄ‡∏ú‡∏∑‡πà‡∏≠ network lag
                                List<Integer> checkAgain = getAlivePids();

                                if (!alive) return; // ‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏ï‡∏≤‡∏¢ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡πÅ‡∏•‡πâ‡∏ß

                                if (!inElection &&
                                    (currentBoss == -1 || !checkAgain.contains(currentBoss))) {

                                    // ‚úÖ ‡πÉ‡∏´‡πâ process ‡∏ó‡∏µ‡πà‡∏°‡∏µ PID ‡πÄ‡∏•‡πá‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î start election
                                    int minAlive = Collections.min(checkAgain);
                                    if (pid == minAlive) {
                                        System.out.println(ts() + "‚ö†Ô∏è Boss missing ‚Üí P" + pid + " starts election");
                                        bossId = -1;
                                        currentBoss = -1;
                                        startElection();
                                    } else {
                                        System.out.println(ts() + "‚ö†Ô∏è Boss missing but wait (P" + minAlive + " will start)");
                                    }
                                }
                            } catch (InterruptedException e) {
                                // ignore
                            }
                        });
                    }

                } catch (InterruptedException e) {
                    break;
                }
            }
        });
    }

    // ---------------- RING ELECTION ----------------
    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏≠‡∏™‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡∏°‡πà
    private void startElection() {
        if (!alive) return; // ‡∏ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏¢‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏≠‡∏™‡πÑ‡∏î‡πâ
        if (inElection) return; // ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏≠‡∏™‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏≠‡∏™‡πÑ‡∏î‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô
        inElection = true;

        try {
            // ‚úÖ ‡∏£‡∏≠ heartbeat ‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà (1.5 ‡∏ß‡∏¥) ‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏∞‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÉ‡∏Ñ‡∏£ alive
            Thread.sleep(1500);
        } catch (InterruptedException ignored) {}

        List<Integer> alivePids = getAlivePids();
        System.out.println(ts() + "DEBUG P" + pid + " sees alivePids=" + alivePids);

        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÅ‡∏Ñ‡πà Process ‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß -> Process ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡πâ‡∏ô‡∏à‡∏∞‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏≠‡∏™‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        if (alivePids.size() == 1 && alivePids.contains(pid)) {
            bossId = pid;
            currentBoss = pid;
            inElection = false;
            System.out.println(ts() + "üéâ P" + pid + " declares: I am the only one, so I am the BOSS!");
            return;
        }

        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏à‡∏∞‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏≠‡∏™‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        System.out.println(ts() + "‚ö° P" + pid + " starts election");
        forwardElection(new HashSet<>(Arrays.asList(pid)), pid);
    }

    //‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏≠‡∏™‡πÑ‡∏õ‡πÉ‡∏´‡πâ Process ‡∏ï‡∏±‡∏ß‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
    private void forwardElection(Set<Integer> candidates, int initiator) {
        List<Integer> alivePids = getAlivePids();
        System.out.println(ts() + "DEBUG P" + pid + " forwarding election, alivePids=" + alivePids);

        if (alivePids.size() == 1 && alivePids.contains(pid)) {
            int newBoss = pid;
            bossId = newBoss;
            currentBoss = newBoss;
            inElection = false;
            System.out.println(ts() + "üéâ P" + pid + " declares: I am the only one, so I am the BOSS!");
            return;
        }

        int idx = alivePids.indexOf(pid);
        int nextIdx = (idx + 1) % alivePids.size();
        int next = alivePids.get(nextIdx);

        if (next == initiator) {
            System.out.println(ts() + "‚û°Ô∏è Forward election to P" + next + " (initiator)");
            int newBoss = Collections.max(candidates);
            bossId = newBoss;
            currentBoss = newBoss;
            inElection = false;
            System.out.println(ts() + "üëë New boss elected: P" + newBoss);
            sendCoordinator(newBoss);
            return;
        }

        try {
            getConnection(next);
            PrintWriter out = writers.get(next);
            if (out != null) {
                StringBuilder msg = new StringBuilder("ELECTION " + initiator);
                for (int c : candidates) msg.append(" ").append(c);
                out.println(msg.toString());
                out.flush();  // ‚úÖ ‡∏Å‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡πâ‡∏≤‡∏á‡πÉ‡∏ô buffer
                System.out.println(ts() + "‚û°Ô∏è Forward election to P" + next);
            }
        } catch (IOException e) {
            System.out.println(ts() + "‚ö†Ô∏è Cannot contact P" + next + ", skipping...");
            connections.remove(next);
            writers.remove(next);
            heartbeatTable.remove(next);
            forwardElection(candidates, initiator);
        }
    }

    //‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏´‡∏≤‡∏ó‡∏∏‡∏Å Process (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á) ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ß‡πà‡∏≤‡πÉ‡∏Ñ‡∏£‡∏Ñ‡∏∑‡∏≠‡∏ö‡∏≠‡∏™‡∏Ñ‡∏ô‡πÉ‡∏´‡∏°‡πà
    private void sendCoordinator(int boss) {
        for (int targetPid = 1; targetPid <= totalProcesses; targetPid++) {
            if (targetPid == pid) continue;     //‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
            try {
                getConnection(targetPid);
                PrintWriter out = writers.get(targetPid);
                if (out != null) out.println("COORDINATOR " + boss);
            } catch (IOException e) {
                connections.remove(targetPid);
                writers.remove(targetPid);
            }
        }
    }

    //‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡πà‡∏≤‡πÉ‡∏Ñ‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏≠‡∏™‡πÉ‡∏´‡πâ Process ‡∏ï‡∏±‡∏ß‡∏ï‡πà‡∏≠‡πÑ‡∏õ
    private void forwardCoordinator(int boss) {
        if (boss == pid) return;   //‡∏ñ‡πâ‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏≠‡∏™‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£ (‡∏£‡∏π‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß)
        sendCoordinator(boss);
    }

    // ---------------- RANDOM CRASH ----------------
    //‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô/‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Process
    private void randomCrash() {
        threadPool.execute(() -> {
            Random rand = new Random(System.currentTimeMillis() + pid);
            try { Thread.sleep(2000 * pid); } catch (InterruptedException e) {}
            while (true) {
                try {
                    Thread.sleep(20000 + rand.nextInt(20000));     // ‡∏ó‡∏∏‡∏Å 20-40 ‡∏ß‡∏¥‡∏™‡∏∏‡πà‡∏° crash
                    int chance = rand.nextInt(100);
                    boolean shouldCrash = (chance < 20);    // ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™ crash = 20%
                    if (alive && shouldCrash) {
                        // ---- Crash ----
                        alive = false;
                        System.out.println(ts() + "üíÄ P" + pid + " has CRASHED!");
                        currentBoss = -1;

                        // ‡∏ô‡∏≠‡∏ô‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏¢ (40-60 ‡∏ß‡∏¥)
                        Thread.sleep(40000 + rand.nextInt(20000));

                        // ---- Revive ----
                        alive = true;
                        System.out.println(ts() + "üå± P" + pid + " has REVIVED!");
                        try { Thread.sleep(2000); } catch (InterruptedException e) {}
                        requestBossInfo();
                    }
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        });
    }

    //‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏ü‡∏∑‡πâ‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤ Process ‡∏à‡∏∞‡∏ñ‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏∑‡πà‡∏ô‡πÜ‡∏ß‡πà‡∏≤‡πÉ‡∏Ñ‡∏£‡∏Ñ‡∏∑‡∏≠‡∏ö‡∏≠‡∏™ ‡∏ì ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ (‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô Process ‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡πÉ‡∏Ñ‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏≠‡∏™ ‡∏ì ‡∏ï‡∏≠‡∏ô‡∏ô‡∏±‡πâ‡∏ô)
    private void requestBossInfo() {
        threadPool.execute(() -> {
            try {
                boolean gotBoss = false;
                for (int targetPid = 1; targetPid <= totalProcesses; targetPid++) {
                    if (targetPid == pid) continue;
                    try {
                        getConnection(targetPid);
                        PrintWriter out = writers.get(targetPid);
                        if (out != null) {
                            out.println("WHO_IS_BOSS " + pid);
                            gotBoss = true;
                        }
                    } catch (IOException e) {
                        connections.remove(targetPid);
                        writers.remove(targetPid);
                    }
                }
                if (!gotBoss) { //‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏Ñ‡∏£‡∏ï‡∏≠‡∏ö (‡∏ü‡∏∑‡πâ‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏Ñ‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß Process ‡∏ï‡∏±‡∏ß‡∏≠‡∏∑‡πà‡∏ô‡∏ï‡∏≤‡∏¢‡∏≠‡∏¢‡∏π‡πà)
                    System.out.println(ts() + "‚ö†Ô∏è Could not contact anyone. Will wait for monitorBoss to decide.");
                }
            } catch (Exception e) {}
        });
    }

    private Socket getConnection(int targetPid) throws IOException {
        Socket s = connections.get(targetPid);
        if (s != null) {
            if (!s.isClosed() && s.isConnected() && !s.isOutputShutdown()) {
                return s;
            } else {
                try { s.close(); } catch (IOException ignored) {}
                connections.remove(targetPid);
                writers.remove(targetPid);
            }
        }

        String host = processIPs.get(targetPid);
        int targetPort = 5000 + targetPid;
        Socket socket = new Socket();
        socket.connect(new InetSocketAddress(host, targetPort), 2000);

        PrintWriter out = new PrintWriter(socket.getOutputStream(), true);
        // ‚úÖ ‡∏™‡πà‡∏á HELLO ‡πÑ‡∏õ‡∏Å‡πà‡∏≠‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ù‡∏±‡πà‡∏á‡∏£‡∏±‡∏ö‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å PID ‡πÄ‡∏£‡∏≤‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        out.println("HELLO " + pid);

        connections.put(targetPid, socket);
        writers.put(targetPid, out);
        System.out.println(ts() + "üîå Established connection to P" + targetPid + " and sent HELLO");

        return socket;
    }

    private void handleSocket(Socket socket) {
        Integer remotePid = null;
        try {
            BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            //PrintWriter out = new PrintWriter(socket.getOutputStream(), true);

            String msg;
            while ((msg = in.readLine()) != null) {
                if (remotePid == null) {
                    String[] parts = msg.split(" ");
                    if (parts.length >= 2) {
                        try {
                            int maybePid = Integer.parseInt(parts[1]);
                            if (maybePid >= 1 && maybePid <= totalProcesses && maybePid != pid) {
                                remotePid = maybePid;

                                // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠ HELLO: ‡πÅ‡∏Ñ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏à‡∏≠ inbound connection
                                if (parts[0].equals("HELLO")) {
                                    System.out.println(ts() + "üì• Got HELLO from P" + maybePid + " (inbound socket)");
                                    continue; // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡πá‡∏ö‡∏•‡∏á connections
                                }
                            }
                        } catch (NumberFormatException ignored) {}
                    }
                }
                handleMessage(msg);
            }
        } catch (IOException e) {
            // connection closed
        } finally {
            try { socket.close(); } catch (IOException ignored) {}
        }
    }

    // ---------------- MAIN ----------------
    public static void main(String[] args) throws IOException {
        if (args.length < 2) {
            System.out.println("Usage: java ProcessNode <pid> <myPort>");
            System.out.println("Example: java ProcessNode 1 5001");
            return;
        }

        int pid = Integer.parseInt(args[0]);
        int myPort = Integer.parseInt(args[1]);

        ProcessNode node = new ProcessNode(pid, myPort);
        node.start();
    }
}
